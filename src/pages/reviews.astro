---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import ReviewCard from '../components/ReviewCard.astro';
import { Icon } from 'astro-icon/components';
import ScrollToTop from '../components/ScrollToTop.astro';
---

<Layout title="Reviews - A Class Barber">
    <Header />
    <section class="bg-black text-white pt-32 md:pt-40 pb-20">
        <div class="max-w-6xl mx-auto px-4">
            {/* Heading */}
            <div class="flex flex-col items-center mb-16">
                <h1 class="text-4xl md:text-5xl font-serif font-extrabold text-center inline-block border-t border-b border-[#c19d65] py-4 px-12 mb-4">Reviews</h1>
                <p class="text-xl text-[#c19d65] business-name"></p>
            </div>

            {/* Loading State */}
            <div id="loading-state" class="flex justify-center items-center min-h-[400px]">
                <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-[#c19d65]"></div>
            </div>

            {/* Error State */}
            <div id="error-state" class="hidden text-center py-8">
                <Icon name="mdi:alert-circle" class="w-16 h-16 text-red-500 mx-auto mb-4" />
                <p class="text-xl text-red-400 error-message"></p>
                <button 
                    class="mt-4 px-6 py-2 bg-[#c19d65] text-white rounded-lg hover:bg-[#d4b684] transition-colors"
                    onclick="window.location.reload()"
                >
                    Try Again
                </button>
            </div>

            {/* Overall Rating */}
            <div id="rating-section" class="hidden flex-col items-center gap-4 mb-16">
                <div class="flex gap-2 stars-container">
                    {Array.from({ length: 5 }).map(() => (
                        <Icon name="mdi:star" class="w-8 h-8 text-gray-400 star-icon" />
                    ))}
                </div>
                <p class="text-2xl font-serif rating-text">0 out of 5</p>
                <p class="text-gray-400 total-reviews">Based on 0 reviews</p>
            </div>

            {/* Reviews Grid */}
            <div id="reviews-grid" class="hidden grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
            </div>

            {/* Pagination */}
            <div id="pagination" class="hidden justify-center gap-2">
            </div>
        </div>
    </section>
    <ScrollToTop />
</Layout>

<script>
    const REVIEWS_PER_PAGE = 6;
    let currentPage = 1;
    let reviewsData = {
        reviews: [],
        overallRating: 0,
        totalReviews: 0,
        businessName: ''
    };

    async function fetchReviews() {
        try {
            const baseUrl = window.location.origin;
            const response = await fetch(`${baseUrl}/api/reviews`, {
             cache: 'default' // Ensures standard caching behavior
            });
 
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (data.error) {
                throw new Error(data.error);
            }
            
            return data;
        } catch (error) {
            console.error('Error fetching reviews:', error);
            throw error;
        }
    }

    function updateUI() {
        // Update business name
        const businessNameEl = document.querySelector('.business-name');
        if (businessNameEl) {
            businessNameEl.textContent = reviewsData.businessName;
        }

        // Update rating section
        const ratingSection = document.getElementById('rating-section');
        if (ratingSection) {
            ratingSection.classList.remove('hidden');
            ratingSection.classList.add('flex');
            
            // Update stars
            const stars = ratingSection.querySelectorAll('.star-icon');
            stars.forEach((star, index) => {
                star.classList.remove('text-gray-400', 'text-[#c19d65]');
                star.classList.add(index < Math.floor(reviewsData.overallRating) ? 'text-[#c19d65]' : 'text-gray-400');
            });

            // Update rating text
            const ratingText = ratingSection.querySelector('.rating-text');
            if (ratingText) {
                ratingText.textContent = `${reviewsData.overallRating.toFixed(1)} out of 5`;
            }

            // Update total reviews
            const totalReviews = ratingSection.querySelector('.total-reviews');
            if (totalReviews) {
                totalReviews.textContent = `Based on ${reviewsData.totalReviews} reviews`;
            }
        }

        // Update reviews grid
        updateReviewsGrid();

        // Update pagination
        updatePagination();
    }

    function updateReviewsGrid() {
        const reviewsGrid = document.getElementById('reviews-grid');
        if (!reviewsGrid) return;

        reviewsGrid.classList.remove('hidden');
        reviewsGrid.innerHTML = '';

        const startIndex = (currentPage - 1) * REVIEWS_PER_PAGE;
        const endIndex = startIndex + REVIEWS_PER_PAGE;
        const paginatedReviews = reviewsData.reviews.slice(startIndex, endIndex);

        paginatedReviews.forEach(review => {
            const reviewCard = createReviewCard(review);
            reviewsGrid.appendChild(reviewCard);
        });
    }

    function createReviewCard(review) {
        const card = document.createElement('div');
        card.className = 'bg-gray-200 rounded-lg p-6 flex flex-col h-full';
        
        card.innerHTML = `
            <p class="text-black text-lg italic mb-6 flex-grow">"${review.text}"</p>
            <div class="flex gap-1 mb-4">
                ${Array.from({ length: 5 }).map((_, i) => `
                    <svg class="w-6 h-6 ${i < review.rating ? 'text-[#c19d65]' : 'text-gray-400'}" 
                         viewBox="0 0 24 24">
                        <path fill="currentColor" 
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2L9.19 8.63L2 9.24l5.46 4.73L5.82 21z"/>
                    </svg>
                `).join('')}
            </div>
            <div class="flex items-center gap-3">
                <div class="w-10 h-10 rounded-full bg-[#c19d65] flex items-center justify-center">
                    <svg class="w-6 h-6 text-white" viewBox="0 0 24 24">
                        <path fill="currentColor" 
                              d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                    </svg>
                </div>
                <div class="flex flex-col">
                    <span class="text-black font-medium">${review.authorName}</span>
                    <span class="text-gray-600 text-sm">${review.date}</span>
                </div>
            </div>
        `;
        
        return card;
    }

    function updatePagination() {
        const paginationContainer = document.getElementById('pagination');
        if (!paginationContainer) return;

        const totalPages = Math.ceil(reviewsData.reviews.length / REVIEWS_PER_PAGE);
        
        if (totalPages > 1) {
            paginationContainer.classList.remove('hidden');
            paginationContainer.classList.add('flex');
            paginationContainer.innerHTML = '';

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.className = `px-4 py-2 rounded ${
                    currentPage === i
                        ? 'bg-[#c19d65] text-white'
                        : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                }`;
                button.textContent = i;
                button.addEventListener('click', () => {
                    currentPage = i;
                    updateReviewsGrid();
                    updatePagination();
                });
                paginationContainer.appendChild(button);
            }
        }
    }

    async function initReviews() {
        const loadingState = document.getElementById('loading-state');
        const errorState = document.getElementById('error-state');

        try {
            loadingState.style.display = 'flex';
            errorState.style.display = 'none';

            reviewsData = await fetchReviews();
            
            // Sort reviews by rating and date
            reviewsData.reviews.sort((a, b) => {
                if (b.rating !== a.rating) {
                    return b.rating - a.rating;
                }
                return b.date.localeCompare(a.date);
            });

            loadingState.style.display = 'none';
            updateUI();
        } catch (error) {
            loadingState.style.display = 'none';
            errorState.style.display = 'block';
            const errorMessage = errorState.querySelector('.error-message');
            if (errorMessage) {
                errorMessage.textContent = error.message || "Failed to load reviews. Please try again later.";
            }
        }
    }

    // Initialize when the DOM is loaded
    document.addEventListener('DOMContentLoaded', initReviews);
</script> 